import { VerticalBox, StyleMetrics, Button, ProgressIndicator } from "std-widgets.slint";

export struct ProgressData {
    is-blank: bool,
    width: float,
}

export struct DownloadData {
    file-name: string,
    speed: string,
    percentage: string,
    remaining-time: string,
    elapsed: string,
    progress: [ProgressData],
    is-downloading: bool,
}

export component DownloadItem {
    callback resume();
    callback stop();
    callback delete();
    callback open();
    callback open-folder();
    in property <string> file-name;
    in property <string> speed;
    in property <string> percentage;
    in property <string> remaining-time;
    in property <string> elapsed;
    in property <[ProgressData]> progress;
    in property <bool> is-downloading;
    VerticalBox {
        Text {
            text: file-name;
            font-weight: 700;
        }

        HorizontalLayout {
            spacing: StyleMetrics.layout-spacing;
            VerticalLayout {
                Text {
                    text: @tr("Speed");
                    overflow: TextOverflow.elide;
                }

                Text {
                    text: speed;
                    overflow: TextOverflow.elide;
                }
            }

            VerticalLayout {
                Text {
                    text: @tr("Percentage");
                    overflow: TextOverflow.elide;
                }

                Text {
                    text: percentage;
                    overflow: TextOverflow.elide;
                }
            }

            VerticalLayout {
                Text {
                    text: @tr("Remaining");
                    overflow: TextOverflow.elide;
                }

                Text {
                    text: remaining-time;
                    overflow: TextOverflow.elide;
                }
            }

            VerticalLayout {
                Text {
                    text: @tr("Elapsed");
                    overflow: TextOverflow.elide;
                }

                Text {
                    text: elapsed;
                    overflow: TextOverflow.elide;
                }
            }
        }

        HorizontalLayout {
            for p in progress: ProgressIndicator {
                width: p.width * parent.width;
                progress: p.is-blank ? 0 : 1;
            }
        }

        HorizontalLayout {
            spacing: StyleMetrics.layout-spacing;
            Button {
                text: is-downloading ? @tr("Stop") : @tr("Resume");
                primary: is-downloading;
                clicked => {
                    if is-downloading {
                        stop()
                    } else {
                        resume()
                    }
                }
            }

            Button {
                text: @tr("Delete");
                clicked => {
                    delete()
                }
            }

            Button {
                text: @tr("Open");
                clicked => {
                    open()
                }
            }

            Button {
                text: @tr("Folder");
                clicked => {
                    open-folder()
                }
            }
        }
    }
}
